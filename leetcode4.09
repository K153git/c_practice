给你一个下标从 0 开始的字符串 s ，该字符串仅由小写英文字母组成，s 中的每个字母都 恰好 出现 两次 。另给你一个下标从 0 开始、长度为 26 的的整数数组 distance 。

字母表中的每个字母按从 0 到 25 依次编号（即，'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25）。

在一个 匀整 字符串中，第 i 个字母的两次出现之间的字母数量是 distance[i] 。如果第 i 个字母没有在 s 中出现，那么 distance[i] 可以 忽略 。

如果 s 是一个 匀整 字符串，返回 true ；否则，返回 false 。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/check-distances-between-same-letters
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

//一
bool checkDistances(char * s, int* distance, int distanceSize){
    int *Fir_place = (int *)malloc(sizeof(int) * 26);
    memset(Fir_place , -1 , sizeof(int) * 26);
    int i = strlen(s)-1;
    for(;i >= 0;--i)
    {
        Fir_place[s[i] - 'a'] = i;
    }
    for(i = 0;i < 26;++ i)
    {
        if(Fir_place[i]!=-1&&Fir_place[i]+distance[i]+1<strlen(s)&&s[Fir_place[i]+distance[i]+1]=='a'+i)
        {
            continue;
        }
        else if(Fir_place[i]==-1)
        {
            continue;
        }
        else
        {
            return false;
        }
    }
    return true;
}

//二
bool checkDistances(char * s, int* distance, int distanceSize){
    int flag[26]={0};
    int i=0;
    for(i=0;i<strlen(s);++i)
    {
        if(flag[s[i]-'a']==0)
        {
            if(i+distance[s[i]-'a']+1<strlen(s))
            {
                if(s[i+distance[s[i]-'a']+1]!=s[i])
                {
                    return false;
                }
                else
                {
                    ++flag[s[i]-'a'];
                    continue;
                }
            }
            else
            {
                return false;
            }
        }
        else
        {
            continue;
        }
    }
    return true;
}
