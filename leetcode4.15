有 n 个花园，按从 1 到 n 标记。另有数组 paths ，其中 paths[i] = [xi, yi] 描述了花园 xi 到花园 yi 的双向路径。在每个花园中，你打算种下四种花之一。

另外，所有花园 最多 有 3 条路径可以进入或离开.

你需要为每个花园选择一种花，使得通过路径相连的任何两个花园中的花的种类互不相同。

以数组形式返回 任一 可行的方案作为答案 answer，其中 answer[i] 为在第 (i+1) 个花园中种植的花的种类。花的种类用  1、2、3、4 表示。保证存在答案。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/flower-planting-with-no-adjacent
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* gardenNoAdj(int n, int** paths, int pathsSize, int* pathsColSize, int* returnSize){
    int *res=(int*)malloc(sizeof(int)*(n+1));
    memset(res,0,sizeof(int)*(n+1));
    int **adj=(int**)malloc(sizeof(int*)*(n+2));
    int i=0,k=0;
    for(i=0;i<=n;++i)
    {
        adj[i]=(int*)malloc(sizeof(int)*4);
        adj[i][0]=0;
        adj[i][1]=0;
        adj[i][2]=0;
        adj[i][3]='\0';
    }
    adj[n+1]='\0';
    for(i=0;i<pathsSize;++i)
    {
        k=0;
        while(adj[paths[i][0]][k]!=0)
        {
            ++k;
        }
        adj[paths[i][0]][k]=paths[i][1]-1;
        k=0;
        while(adj[paths[i][1]][k]!=0)
        {
            ++k;
        }
        adj[paths[i][1]][k]=paths[i][0]-1;
    }
    res[0]=1;
    for(i=1;i<n;++i)
    {
        for(k=1;k<=4;++k)
        {
            if(k!=res[adj[i+1][0]]&&k!=res[adj[i+1][1]]&&k!=res[adj[i+1][2]])
            {
                res[i]=k;
                break;
            }
        }
    }
    *returnSize=n;
    return res;
}
