给你一个字符串数组 words ，每一个字符串长度都相同，令所有字符串的长度都为 n 。

每个字符串 words[i] 可以被转化为一个长度为 n - 1 的 差值整数数组 difference[i] ，其中对于 0 <= j <= n - 2 有 difference[i][j] = words[i][j+1] - words[i][j] 。注意两个字母的差值定义为它们在字母表中 位置 之差，也就是说 'a' 的位置是 0 ，'b' 的位置是 1 ，'z' 的位置是 25 。

比方说，字符串 "acb" 的差值整数数组是 [2 - 0, 1 - 2] = [2, -1] 。
words 中所有字符串 除了一个字符串以外 ，其他字符串的差值整数数组都相同。你需要找到那个不同的字符串。

请你返回 words中 差值整数数组 不同的字符串。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/odd-string-difference
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

char * oddString(char ** words, int wordsSize){
    bool flag;
    int i,j,n=strlen(words[0]);
    int diff=words[1][0]-words[0][0];
    for (i=1;i<n;++i)
    {
        if(words[1][i]-words[0][i]!=diff)
        {
            flag=false;
            break;
        }
    }
    if(i==n)
        flag=true;
    if(flag==true)
    {
        for(i=2;i<wordsSize;++i)
        {
            diff=words[i][0]-words[0][0];
            for(j=0;j<n;++j)
            {
                if(words[i][j]-words[0][j]!=diff)
                    return words[i];
            }
        }
    }
    else
    {
        diff=words[2][0]-words[0][0];
        for(i=1;i<n;++i)
        {
            if(words[2][i]-words[0][i]!=diff)
                return words[0];
        }
        return words[1];
    }
    return 0;
}
